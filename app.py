import streamlit as st
from ultralytics import YOLO
from PIL import Image
import numpy as np
import yaml
import os
import base64

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64
def get_base64_image(image_path):
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def add_background(image_path):
    image_base64 = get_base64_image(image_path)
    page_bg_img = f"""
    <style>
    .stApp {{
        background-image: url("data:image/png;base64,{image_base64}");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        color: white;
    }}
    h1, h2, p, label {{
        color: white;
    }}
    .stButton>button {{
        background-color: #007BFF; /* –ì–æ–ª—É–±–∞—è –∫–Ω–æ–ø–∫–∞ */
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }}
    .stButton>button:hover {{
        background-color: #0056b3; /* –¢–µ–º–Ω–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
    }}
    .stFileUploader>div>div {{
        background-color: rgba(255, 255, 255, 0.1);
        border: 2px dashed white;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
    }}
    /* –°—Ç–∏–ª–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é */
    [data-testid="stSidebar"] {{
        background-color: rgba(0, 0, 0, 0.5); /* –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω */
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2); /* –¢–µ–Ω—å */
    }}
    [data-testid="stSidebar"] * {{
        color: white !important; /* –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */
    }}
    </style>
    """
    st.markdown(page_bg_img, unsafe_allow_html=True)

# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
add_background("/Users/imac/Desktop/Diplom/projects/new_data2/assets/background.jpg")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('sonar-seg.yaml', 'r') as f:
    config = yaml.safe_load(f)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
model_path = "runs/segment/train/weights/best.pt"
if not os.path.exists(model_path):
    st.error(f"–ú–æ–¥–µ–ª—å {model_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
else:
    model = YOLO(model_path)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict(image):
    if image.shape[-1] != 3:
        image = np.stack((image,) * 3, axis=-1)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ RGB, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
    results = model.predict(image)
    return results[0].plot()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
st.title("–ü–æ–¥–≤–æ–¥–Ω—ã–π –†–∞–¥–∞—Ä üåä")
st.markdown("<h2 style='color: white;'>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –¥–Ω–∞ –Ω–∞ —ç—Ö–æ–ª–æ—Ç–Ω—ã—Ö —Å–Ω–∏–º–∫–∞—Ö</h2>", unsafe_allow_html=True)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–∞—Ö
st.sidebar.header("–ö–ª–∞—Å—Å—ã")
class_names = config['names']
for class_id, class_name in class_names.items():
    st.sidebar.markdown(f"<p style='color: white;'>{class_id}: {class_name}</p>", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_image = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ö–æ–ª–æ—Ç–Ω—ã–π —Å–Ω–∏–º–æ–∫", type=["jpg", "png", "jpeg"])

if uploaded_image is not None:
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = Image.open(uploaded_image)
    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=400)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ NumPy –º–∞—Å—Å–∏–≤
    image_np = np.array(image)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            result_image = predict(image_np)
            st.image(result_image, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", width=400)
